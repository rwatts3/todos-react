{"version":3,"sources":["meteor://ðŸ’»app/packages/simple_rest-bearer-token-parser/bearer_token_parser.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"/packages/simple_rest-bearer-token-parser.js","sourcesContent":["/**\n * Parses bearer token from the incoming request\n *\n * Accepts tokens passed via the standard headers, URL query parameters, or\n * request body (whichever is found first, in that order).\n *\n * Stores the token in req.authToken for later middleware.\n *\n * The header signature is: \"Authorization: Bearer <token>\".\n *\n * The query signature is: \"?access_token=<token>\"\n *\n * @middleware\n */\nJsonRoutes.Middleware.parseBearerToken = function (req, res, next) {\n  req.authToken = parseHeaders(req) || parseQuery(req);\n  next();\n};\n\n/**\n * Parses bearer token from the Authorization header\n *\n * @param req {Object} The incoming Connect request\n * @returns {String} The bearer token\n * @private\n */\nfunction parseHeaders(req) {\n  if (req.headers && req.headers.authorization) {\n    var parts = req.headers.authorization.split(' ');\n\n    if (parts.length === 2) {\n      var scheme = parts[0];\n      var credentials = parts[1];\n\n      if (/^Bearer$/i.test(scheme)) {\n        return credentials;\n      }\n    }\n  }\n}\n\n/**\n * Parses bearer token from URL query parameters\n *\n * @param req {Object} The incoming Connect request\n * @returns {String} The bearer token\n */\nfunction parseQuery(req) {\n  // jscs:disable requireCamelCaseOrUpperCaseIdentifiers\n  if (req.query && req.query.access_token) {\n    return req.query.access_token;\n  }\n\n  // jscs:enable requireCamelCaseOrUpperCaseIdentifiers\n}\n"]}