{"version":3,"sources":["meteor://ðŸ’»app/packages/simple_rest-accounts-password/rest-login.js"],"names":[],"mappingsfile":"/packages/simple_rest-accounts-password.js","sourcesContent":["JsonRoutes.Middleware.use(JsonRoutes.Middleware.parseBearerToken);\nJsonRoutes.Middleware.use(JsonRoutes.Middleware.authenticateMeteorUserByToken);\n\n// Handle errors specifically for the login routes correctly\nJsonRoutes.ErrorMiddleware.use('/users/login', RestMiddleware.handleErrorAsJson);\nJsonRoutes.ErrorMiddleware.use('/users/register', RestMiddleware.handleErrorAsJson);\n\nJsonRoutes.add('options', '/users/login', function (req, res) {\n  JsonRoutes.sendResult(res);\n});\n\nJsonRoutes.add('post', '/users/login', function (req, res) {\n  var options = req.body;\n\n  var user;\n  if (options.hasOwnProperty('email')) {\n    check(options, {\n      email: String,\n      password: String,\n    });\n    user = Meteor.users.findOne({ 'emails.address': options.email });\n  } else {\n    check(options, {\n      username: String,\n      password: String,\n    });\n    user = Meteor.users.findOne({ username: options.username });\n  }\n\n  if (!user) {\n    throw new Meteor.Error('not-found',\n      'User with that username or email address not found.');\n  }\n\n  var result = Accounts._checkPassword(user, options.password);\n  check(result, {\n    userId: String,\n    error: Match.Optional(Meteor.Error),\n  });\n\n  if (result.error) {\n    throw result.error;\n  }\n\n  var stampedLoginToken = Accounts._generateStampedLoginToken();\n  check(stampedLoginToken, {\n    token: String,\n    when: Date,\n  });\n\n  Accounts._insertLoginToken(result.userId, stampedLoginToken);\n\n  var tokenExpiration = Accounts._tokenExpiration(stampedLoginToken.when);\n  check(tokenExpiration, Date);\n\n  JsonRoutes.sendResult(res, {\n    data: {\n      id: result.userId,\n      token: stampedLoginToken.token,\n      tokenExpires: tokenExpiration,\n    },\n  });\n\n});\n\nJsonRoutes.add('options', '/users/register', function (req, res) {\n  JsonRoutes.sendResult(res);\n});\n\nJsonRoutes.add('post', '/users/register', function (req, res) {\n  var options = req.body;\n\n  check(options, {\n    username: Match.Optional(String),\n    email: Match.Optional(String),\n    password: String,\n  });\n\n  var userId = Accounts.createUser(\n    _.pick(options, 'username', 'email', 'password'));\n\n  // Log in the new user and send back a token\n  var stampedLoginToken = Accounts._generateStampedLoginToken();\n  check(stampedLoginToken, {\n    token: String,\n    when: Date,\n  });\n\n  // This adds the token to the user\n  Accounts._insertLoginToken(userId, stampedLoginToken);\n\n  var tokenExpiration = Accounts._tokenExpiration(stampedLoginToken.when);\n  check(tokenExpiration, Date);\n\n  // Return the same things the login method returns\n  JsonRoutes.sendResult(res, {\n    data: {\n      token: stampedLoginToken.token,\n      tokenExpires: tokenExpiration,\n      id: userId,\n    },\n  });\n});\n"]}