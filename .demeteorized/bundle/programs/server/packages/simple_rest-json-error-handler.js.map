{"version":3,"sources":["meteor://ðŸ’»app/packages/simple_rest-json-error-handler/json_error_handler.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"/packages/simple_rest-json-error-handler.js","sourcesContent":["/**\n * Handle any connect errors with a standard JSON response\n *\n * Response looks like:\n *   {\n *     error: 'Error type',\n  *    reason: 'Cause of error'\n  *  }\n *\n * @middleware\n */\nRestMiddleware.handleErrorAsJson = function (err, request, response, next) { // jshint ignore:line\n  // If we at least put in some effort to throw a user-facing Meteor.Error,\n  // the default code should be less severe\n  if (err.sanitizedError && err.sanitizedError.errorType === 'Meteor.Error') {\n    if (!err.sanitizedError.statusCode) {\n      err.sanitizedError.statusCode = err.statusCode || 400;\n    }\n\n    err = err.sanitizedError;\n  } else if (err.errorType === 'Meteor.Error') {\n    if (!err.statusCode) err.statusCode = 400;\n  } else {\n    // Hide internal error details\n    // XXX could check node_env here and return full\n    // error details if development\n    var statusCode = err.statusCode;\n    err = new Error();\n    err.statusCode = statusCode;\n  }\n\n  // If an error has a `data` property, we\n  // send that. This allows packages to include\n  // extra client-safe data with the errors they throw.\n  var body = {\n    error: err.error || 'internal-server-error',\n    reason: err.reason || 'Internal server error',\n    details: err.details,\n    data: err.data,\n  };\n\n  body = JSON.stringify(body, null, 2);\n\n  response.statusCode = err.statusCode || 500;\n  response.setHeader('Content-Type', 'application/json');\n  response.write(body);\n  response.end();\n};\n"]}