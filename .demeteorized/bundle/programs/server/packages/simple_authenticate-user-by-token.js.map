{"version":3,"sources":["meteor://ðŸ’»app/packages/simple_authenticate-user-by-token/auth.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"/packages/simple_authenticate-user-by-token.js","sourcesContent":["var Fiber = Npm.require('fibers');\n\n/**\n * SimpleRest middleware for validating a Meteor.user's login token\n *\n * This middleware must be processed after the request.token has been set to a\n * valid login token for a Meteor.user account (from a separate layer of\n * middleware). If authentication is successful, the request.userId will be set\n * to the ID of the authenticated user.\n *\n * @middleware\n */\nJsonRoutes.Middleware.authenticateMeteorUserByToken =\n  function (req, res, next) {\n    Fiber(function () {\n      var userId = getUserIdFromAuthToken(req.authToken);\n      if (userId) {\n        req.userId = userId;\n      }\n\n      next();\n    }).run();\n  };\n\n/**\n * Retrieves the ID of the Meteor.user that the given auth token belongs to\n *\n * @param token An unhashed auth token\n * @returns {String} The ID of the authenticated Meteor.user, or null if token\n *     is invalid\n */\nfunction getUserIdFromAuthToken(token) {\n  if (!token) {\n    return null;\n  }\n\n  var user = Meteor.users.findOne({\n    'services.resume.loginTokens.hashedToken': Accounts._hashLoginToken(token),\n  });\n  if (user) {\n    return user._id;\n  }\n\n  return null;\n}\n"]}