{"version":3,"sources":["meteor://ðŸ’»app/packages/arboleya_electrify/meteor/index.js"],"names":[],"mappingsfile":"/packages/arboleya_electrify.js","sourcesContent":["Electrify = {};\n\nvar callbacks = {};\nvar socket;\nvar where;\n\nMeteor.startup(function(){\n\n  if(Meteor.isServer) {\n    where = 'server';\n    SockJS = Npm.require('sockjs-client');\n    Meteor.methods({\n      'electrify.get.socket.port': function(){\n        return process.env.SOCKET_PORT || null;\n      }\n    });\n\n    connect(process.env.SOCKET_PORT);\n  }\n\n  if(Meteor.isClient) {\n    where = 'client';\n    SockJS = SockJS || window.SockJS;\n    Meteor.call('electrify.get.socket.port', [], function(error, port){\n      connect(port);\n    });\n  }\n\n});\n\nfunction log(){\n  var args = Array.prototype.slice.call(arguments);\n  console.log('electrify:meteor:index@'+ where +':', args.join(' '));\n}\n\nfunction connect(port){\n\n  if(!port) {\n    log([\n      'cannot initialize connection. Did you `npm install -g electrify`?',\n      'install it and try running your meteor app with `electrify` npm command'\n    ].join('\\n'));\n    return;\n  }\n\n  socket = new SockJS('http://127.0.0.1:' + port + '/electrify');\n\n  socket.onopen = function() {\n    log('connection is open');\n    fire_ready_callbacks();\n  };\n\n  socket.onmessage = function(e) {\n    var packet = JSON.parse(e.data);\n    var done;\n\n    if((done = callbacks[packet.handshake])) {\n      callbacks[packet.handshake] = null;\n      delete callbacks[packet.handshake];\n      done.apply(null, [].concat(packet.error, packet.args));\n    }\n    else\n      done.apply(null, [\n        'No callback defined for handshake `'+ packet.handshake +'`'\n      ]);\n  };\n\n  socket.onclose = function() {\n    log('closing socket connection');\n  };\n}\n\nvar startup_callbacks = {\n  server: [],\n  client: []\n};\n\nElectrify.startup = function(ready){\n  var where = Meteor.isServer ? 'server' : 'client';\n  startup_callbacks[where].push(ready);\n};\n\nfunction fire_ready_callbacks(){\n  var where = Meteor.isServer ? 'server' : 'client';\n  _.each(startup_callbacks[where], function(ready) {\n    ready();\n  });\n  startup_callbacks[where] = [];\n}\n\nElectrify.call = function(method, args, done) {\n\n  if(!(done instanceof Function))\n    throw new Error('Third argument to `Electrify.call()` must be a funciton');\n\n  if(!socket) {\n    var msg = 'Cannot call methods, socket connection not initialized';\n    console.warn(msg);\n    setTimeout(function(){ done(new Error(msg)); }, 1);\n    return;\n  }\n\n  var packet = {\n    handshake: Random.id(),\n    method: method,\n    args: args\n  };\n\n  callbacks[packet.handshake] = done;\n  socket.send(JSON.stringify(packet));\n};\n"]}